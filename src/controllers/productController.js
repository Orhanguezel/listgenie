import Product from "../models/Product.js";
import Category from "../models/Category.js";
import asyncHandler from "express-async-handler";
import mongoose from "mongoose"; // ‚úÖ ObjectId d√∂n√º≈ü√ºm√º i√ßin
import dotenv from "dotenv";

dotenv.config();


// ‚úÖ **Kullanƒ±cƒ± Kayƒ±t**

const BASE_URL = process.env.BASE_URL || "http://localhost:5010"; // ‚úÖ Base URL eklendi

// üìå **T√ºm √ºr√ºnleri getir**
export const fetchProducts = asyncHandler(async (req, res) => {
  try {
    const products = await Product.find().populate("category", "name image");
    res.json(products);
  } catch (error) {
    res.status(500).json({ message: "‚ö†Ô∏è √úr√ºnler getirilemedi!", error: error.message });
  }
});

// üìå **√úr√ºn Ekleme**
export const createProduct = asyncHandler(async (req, res) => {
  console.log("üìå Backend'e Gelen Veri:", req.body);
  console.log("üìÇ Y√ºklenen Dosyalar:", req.files);

  const { title, description, price, stock, category } = req.body;

  let images = [];

  // ‚úÖ Eƒüer URL'den eklenmi≈üse, onu ekle
  if (req.body.existingImages) {
    images = Array.isArray(req.body.existingImages)
      ? req.body.existingImages
      : [req.body.existingImages];
  }

  // ‚úÖ Eƒüer dosya y√ºklenmi≈üse, doƒüru URL formatƒ±nda kaydedelim
  if (req.files && req.files.length > 0) {
    const uploadedImages = req.files.map(
      (file) => `${BASE_URL}/uploads/product-images/${file.filename}`
    );
    images = [...images, ...uploadedImages];
  }

  const newProduct = new Product({
    title,
    description,
    price,
    stock,
    category,
    images,
  });

  await newProduct.save();
  res.status(201).json({ message: "‚úÖ √úr√ºn ba≈üarƒ±yla olu≈üturuldu!", product: newProduct });
});




// üìå **Belirli bir √ºr√ºn√º getir (Kategori bilgileriyle birlikte)**
export const getProductById = asyncHandler(async (req, res) => {
  if (!mongoose.Types.ObjectId.isValid(req.params.id)) {
    return res.status(400).json({ message: "‚ö†Ô∏è Ge√ßersiz √ºr√ºn ID!" });
  }

  const product = await Product.findById(req.params.id)
    .populate("category", "name image")
    .select("-__v");

  if (!product) return res.status(404).json({ message: "‚ö†Ô∏è √úr√ºn bulunamadƒ±!" });

  res.json(product);
});

// üìå **√úr√ºn√º G√ºncelle**
export const updateProduct = asyncHandler(async (req, res) => {
  if (!mongoose.Types.ObjectId.isValid(req.params.id)) {
    return res.status(400).json({ message: "‚ö†Ô∏è Ge√ßersiz √ºr√ºn ID!" });
  }

  const { title, description, price, stock, category } = req.body;

  // üìå **Mevcut √ºr√ºn√º getir**
  const existingProduct = await Product.findById(req.params.id);
  if (!existingProduct) return res.status(404).json({ message: "‚ö†Ô∏è √úr√ºn bulunamadƒ±!" });

  // üìå **Y√ºklenen Resimleri Al ve G√ºncelle**
  let images = req.files.length > 0 ? req.files.map((file) => `/uploads/${file.filename}`) : existingProduct.images;

  existingProduct.title = title || existingProduct.title;
  existingProduct.description = description || existingProduct.description;
  existingProduct.price = price || existingProduct.price;
  existingProduct.stock = stock || existingProduct.stock;
  existingProduct.category = category || existingProduct.category;
  existingProduct.images = images;

  const updatedProduct = await existingProduct.save();

  res.json({ message: "‚úÖ √úr√ºn ba≈üarƒ±yla g√ºncellendi!", product: updatedProduct });
});

// üìå **√úr√ºn√º Sil (Admin)**
export const deleteProduct = asyncHandler(async (req, res) => {
  if (!mongoose.Types.ObjectId.isValid(req.params.id)) {
    return res.status(400).json({ message: "‚ö†Ô∏è Ge√ßersiz √ºr√ºn ID!" });
  }

  const product = await Product.findByIdAndDelete(req.params.id);
  if (!product) return res.status(404).json({ message: "‚ö†Ô∏è √úr√ºn bulunamadƒ±!" });

  res.json({ message: "‚úÖ √úr√ºn ba≈üarƒ±yla silindi!" });
});
// üìå **√úr√ºnleri Kategoriye G√∂re Filtrele**
export const fetchProductsByCategory = asyncHandler(async (req, res) => {
  if (!mongoose.Types.ObjectId.isValid(req.params.id)) {
    return res.status(400).json({ message: "‚ö†Ô∏è Ge√ßersiz kategori ID!" });
  }

  const products = await Product.find({ category: req.params.id }).populate("category", "name image");
  res.json(products);
});